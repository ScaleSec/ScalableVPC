{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This template creates a VPC up to 3 AZs x 3 layers, based on parameters.",
  "Parameters": {
    "VpcCidr": {
      "Description": "CIDR block for the VPC",
      "Type": "String",
      "Default": "10.0.0.0/16"
    },
    "VpcId": {
      "Type": "String",
      "Description": "Optional - VPC Id of existing VPC. Leave blank to create a new VPC.",
      "Default": "",
      "AllowedPattern": "^(?:vpc-[0-9a-f]{8}|)$",
      "ConstraintDescription": "VPC ID must begin with 'vpc-' or leave blank to have a new VPC created."
    },
    "PubSubAz1Cidr": {
      "Description": "CIDR block for the public subnet in AZ1. Required if you don't specify an existing VPC.",
      "Type": "String",
      "MinLength": 9,
      "MaxLength": 18,
      "Default": "10.0.32.0/20",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IPv4 CIDR formatted as x.x.x.x/x."
    },
    "PubSubAz2Cidr": {
      "Description": "(optional) CIDR block for the public subnet in AZ2. This parameter determines whether AZ2 is used.",
      "Type": "String",
      "MinLength": 0,
      "MaxLength": 18,
      "Default": "10.0.96.0/20",
      "AllowedPattern": "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})|$",
      "ConstraintDescription": "Must be a valid IPv4 CIDR formatted as x.x.x.x/x."
    },
    "PubSubAz3Cidr": {
      "Description": "(optional) CIDR block for the public subnet in AZ3. This parameter determines whether AZ3 is used.",
      "Type": "String",
      "MinLength": 0,
      "MaxLength": 18,
      "Default": "10.0.160.0/20",
      "AllowedPattern": "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})|$",
      "ConstraintDescription": "Must be a valid IPv4 CIDR formatted as x.x.x.x/x."
    },
    "PrivSubTier1Az1Cidr": {
      "Description": "(optional) CIDR block for the first tier private subnet in AZ1.",
      "Type": "String",
      "MinLength": 0,
      "MaxLength": 18,
      "Default": "10.0.0.0/19",
      "AllowedPattern": "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})|$",
      "ConstraintDescription": "Must be a valid IPv4 CIDR formatted as x.x.x.x/x."
    },
    "PrivSubTier1Az2Cidr": {
      "Description": "(optional) CIDR block for the first tier private subnet in AZ2. Used only if you specified a CIDR for the Public Subnet in AZ2.",
      "Type": "String",
      "MinLength": 0,
      "MaxLength": 18,
      "Default": "10.0.64.0/19",
      "AllowedPattern": "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})|$",
      "ConstraintDescription": "Must be a valid IPv4 CIDR formatted as x.x.x.x/x."
    },
    "PrivSubTier1Az3Cidr": {
      "Description": "(optional) CIDR block for the first tier private subnet in AZ3. Used only if you specified a CIDR for the Public Subnet in AZ3.",
      "Type": "String",
      "MinLength": 0,
      "MaxLength": 18,
      "Default": "10.0.128.0/19",
      "AllowedPattern": "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})|$",
      "ConstraintDescription": "Must be a valid IPv4 CIDR formatted as x.x.x.x/x."
    },
    "PrivSubTier2Az1Cidr": {
      "Description": "(optional) CIDR block for the second tier private subnet in AZ1.",
      "Type": "String",
      "MinLength": 0,
      "MaxLength": 18,
      "Default": "10.0.48.0/21",
      "AllowedPattern": "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})|$",
      "ConstraintDescription": "Must be a valid IPv4 CIDR formatted as x.x.x.x/x."
    },
    "PrivSubTier2Az2Cidr": {
      "Description": "(optional) CIDR block for the second tier private subnet in AZ2. Used only if you created a public subnet in AZ2.",
      "Type": "String",
      "MinLength": 0,
      "MaxLength": 18,
      "Default": "10.0.112.0/21",
      "AllowedPattern": "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})|$",
      "ConstraintDescription": "Must be a valid IPv4 CIDR formatted as x.x.x.x/x."
    },
    "PrivSubTier2Az3Cidr": {
      "Description": "(optional) CIDR block for the second tier private subnet in AZ3. Used only if you created a public subnet in AZ3.",
      "Type": "String",
      "MinLength": 0,
      "MaxLength": 18,
      "Default": "10.0.176.0/21",
      "AllowedPattern": "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})|$",
      "ConstraintDescription": "Must be a valid IPv4 CIDR formatted as x.x.x.x/x."
    },
    "NatInstanceType": {
      "Description": "EC2 instance type for NAT server(s)",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t1.micro",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "g2.2xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "cr1.8xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "Must be a valid EC2 instance type."
    },
    "ConnectToInternet": {
      "Description": "Set to false if this VPC should not be connected to the Internet",
      "Type": "String",
      "Default": "true",
      "AllowedValues": [
        "true",
        "false"
      ]
    }
  },
  "Mappings": {
    "AWSInstanceType2Arch": {
      "t1.micro": {
        "Arch": "PV64"
      },
      "t2.micro": {
        "Arch": "HVM64"
      },
      "t2.small": {
        "Arch": "HVM64"
      },
      "t2.medium": {
        "Arch": "HVM64"
      },
      "t2.large": {
        "Arch": "HVM64"
      },
      "m1.small": {
        "Arch": "PV64"
      },
      "m1.medium": {
        "Arch": "PV64"
      },
      "m1.large": {
        "Arch": "PV64"
      },
      "m1.xlarge": {
        "Arch": "PV64"
      },
      "m2.xlarge": {
        "Arch": "PV64"
      },
      "m2.2xlarge": {
        "Arch": "PV64"
      },
      "m2.4xlarge": {
        "Arch": "PV64"
      },
      "m3.medium": {
        "Arch": "HVM64"
      },
      "m3.large": {
        "Arch": "HVM64"
      },
      "m3.xlarge": {
        "Arch": "HVM64"
      },
      "m3.2xlarge": {
        "Arch": "HVM64"
      },
      "c1.medium": {
        "Arch": "PV64"
      },
      "c1.xlarge": {
        "Arch": "PV64"
      },
      "c3.large": {
        "Arch": "HVM64"
      },
      "c3.xlarge": {
        "Arch": "HVM64"
      },
      "c3.2xlarge": {
        "Arch": "HVM64"
      },
      "c3.4xlarge": {
        "Arch": "HVM64"
      },
      "c3.8xlarge": {
        "Arch": "HVM64"
      },
      "c4.large": {
        "Arch": "HVM64"
      },
      "c4.xlarge": {
        "Arch": "HVM64"
      },
      "c4.2xlarge": {
        "Arch": "HVM64"
      },
      "c4.4xlarge": {
        "Arch": "HVM64"
      },
      "c4.8xlarge": {
        "Arch": "HVM64"
      },
      "g2.2xlarge": {
        "Arch": "HVMG2"
      },
      "r3.large": {
        "Arch": "HVM64"
      },
      "r3.xlarge": {
        "Arch": "HVM64"
      },
      "r3.2xlarge": {
        "Arch": "HVM64"
      },
      "r3.4xlarge": {
        "Arch": "HVM64"
      },
      "r3.8xlarge": {
        "Arch": "HVM64"
      },
      "i2.xlarge": {
        "Arch": "HVM64"
      },
      "i2.2xlarge": {
        "Arch": "HVM64"
      },
      "i2.4xlarge": {
        "Arch": "HVM64"
      },
      "i2.8xlarge": {
        "Arch": "HVM64"
      },
      "d2.xlarge": {
        "Arch": "HVM64"
      },
      "d2.2xlarge": {
        "Arch": "HVM64"
      },
      "d2.4xlarge": {
        "Arch": "HVM64"
      },
      "d2.8xlarge": {
        "Arch": "HVM64"
      },
      "hi1.4xlarge": {
        "Arch": "HVM64"
      },
      "hs1.8xlarge": {
        "Arch": "HVM64"
      },
      "cr1.8xlarge": {
        "Arch": "HVM64"
      },
      "cc2.8xlarge": {
        "Arch": "HVM64"
      },
      "cg1.4xlarge": {
        "Arch": "HVMG2"
      }
    },
    "AWSRegionArch2AMI": {
      "eu-west-1": {
        "PV64": "ami-a3be93d4",
        "HVM64": "ami-69b9941e",
        "HVMG2": "ami-358ca042"
      },
      "ap-southeast-1": {
        "PV64": "ami-50978202",
        "HVM64": "ami-52978200",
        "HVMG2": "ami-4e7e6a1c"
      },
      "ap-southeast-2": {
        "PV64": "ami-c71856fd",
        "HVM64": "ami-c11856fb",
        "HVMG2": "ami-156f212f"
      },
      "eu-central-1": {
        "PV64": "ami-a6aeaebb",
        "HVM64": "ami-daaeaec7",
        "HVMG2": "ami-ba6467a7"
      },
      "ap-northeast-1": {
        "PV64": "ami-9c2fb89c",
        "HVM64": "ami-9a2fb89a",
        "HVMG2": "ami-7c50c17c"
      },
      "us-east-1": {
        "PV64": "ami-cf1066aa",
        "HVM64": "ami-e3106686",
        "HVMG2": "ami-8ba3d3ee"
      },
      "sa-east-1": {
        "PV64": "ami-370c992a",
        "HVM64": "ami-3b0c9926",
        "HVMG2": "NOT SUPPORTED"
      },
      "us-west-1": {
        "PV64": "ami-d53aff91",
        "HVM64": "ami-cd3aff89",
        "HVMG2": "ami-17985c53"
      },
      "us-west-2": {
        "PV64": "ami-81f7e8b1",
        "HVM64": "ami-9ff7e8af",
        "HVMG2": "ami-99352ba9"
      }
    }
  },
  "Conditions": {
    "CreateVpcResources": {
      "Fn::Equals": [
        {
          "Ref": "VpcId"
        },
        ""
      ]
    },
    "CreatePubSubAz2": {
      "Fn::And": [
        {
          "Condition": "CreateVpcResources"
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "PubSubAz2Cidr"
                },
                ""
              ]
            }
          ]
        }
      ]
    },
    "CreatePubSubAz3": {
      "Fn::And": [
        {
          "Condition": "CreatePubSubAz2"
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "PubSubAz3Cidr"
                },
                ""
              ]
            }
          ]
        }
      ]
    },
    "CreatePrivSubTier1Az1": {
      "Fn::And": [
        {
          "Condition": "CreateVpcResources"
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "PrivSubTier1Az1Cidr"
                },
                ""
              ]
            }
          ]
        }
      ]
    },
    "CreatePrivSubTier1Az2": {
      "Fn::And": [
        {
          "Condition": "CreatePrivSubTier1Az1"
        },
        {
          "Condition": "CreatePubSubAz2"
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "PrivSubTier1Az2Cidr"
                },
                ""
              ]
            }
          ]
        }
      ]
    },
    "CreatePrivSubTier1Az3": {
      "Fn::And": [
        {
          "Condition": "CreatePubSubAz3"
        },
        {
          "Condition": "CreatePrivSubTier1Az2"
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "PrivSubTier1Az3Cidr"
                },
                ""
              ]
            }
          ]
        }
      ]
    },
    "CreatePrivSubTier2Az1": {
      "Fn::And": [
        {
          "Condition": "CreatePrivSubTier1Az1"
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "PrivSubTier2Az1Cidr"
                },
                ""
              ]
            }
          ]
        }
      ]
    },
    "CreatePrivSubTier2Az2": {
      "Fn::And": [
        {
          "Condition": "CreatePrivSubTier2Az1"
        },
        {
          "Condition": "CreatePrivSubTier1Az2"
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "PrivSubTier2Az2Cidr"
                },
                ""
              ]
            }
          ]
        }
      ]
    },
    "CreatePrivSubTier2Az3": {
      "Fn::And": [
        {
          "Condition": "CreatePrivSubTier2Az2"
        },
        {
          "Condition": "CreatePrivSubTier1Az3"
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "PrivSubTier2Az3Cidr"
                },
                ""
              ]
            }
          ]
        }
      ]
    },
    "AddInternetGateway": {
      "Fn::And": [
        {
          "Condition": "CreateVpcResources"
        },
        {
          "Condition": "CreatePrivSubTier1Az3"
        },
        {
          "Fn::Equals": [
            {
              "Ref": "ConnectToInternet"
            },
            true
          ]
        }
      ]
    }
  },
  "Resources": {
    "Vpc": {
      "Condition": "CreateVpcResources",
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VpcCidr"
        },
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "PubSubAz1": {
      "Condition": "CreateVpcResources",
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "MapPublicIpOnLaunch": true,
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Ref": "PubSubAz1Cidr"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "Public Subnet AZ1"
          }
        ]
      }
    },
    "PubSubAz2": {
      "Condition": "CreatePubSubAz2",
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "MapPublicIpOnLaunch": true,
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Ref": "PubSubAz2Cidr"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "Public Subnet AZ2"
          }
        ]
      }
    },
    "PubSubAz3": {
      "Condition": "CreatePubSubAz2",
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "MapPublicIpOnLaunch": true,
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Ref": "PubSubAz3Cidr"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "2",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "Public Subnet AZ3"
          }
        ]
      }
    },
    "PrivSubTier1Az1": {
      "Condition": "CreatePrivSubTier1Az1",
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Ref": "PrivSubTier1Az1Cidr"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "Private Subnet Tier1 AZ1"
          }
        ]
      }
    },
    "PrivSubTier1Az2": {
      "Condition": "CreatePrivSubTier1Az2",
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Ref": "PrivSubTier1Az2Cidr"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "Private Subnet Tier1 AZ2"
          }
        ]
      }
    },
    "PrivSubTier1Az3": {
      "Condition": "CreatePrivSubTier1Az3",
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Ref": "PrivSubTier1Az3Cidr"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "2",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "Private Subnet Tier1 AZ3"
          }
        ]
      }
    },
    "PrivSubTier2Az1": {
      "Condition": "CreatePrivSubTier2Az1",
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Ref": "PrivSubTier2Az1Cidr"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "Private Subnet Tier2 AZ1"
          }
        ]
      }
    },
    "PrivSubTier2Az2": {
      "Condition": "CreatePrivSubTier2Az2",
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Ref": "PrivSubTier2Az2Cidr"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "Private Subnet Tier2 AZ2"
          }
        ]
      }
    },
    "PrivSubTier2Az3": {
      "Condition": "CreatePrivSubTier2Az3",
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Ref": "PrivSubTier2Az3Cidr"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "2",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "Private Subnet Tier2 AZ3"
          }
        ]
      }
    },
    "PrivateRouteTableAz1": {
      "Condition": "CreatePrivSubTier1Az1",
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "Private AZ1"
          }
        ]
      }
    },
    "PrivateRouteTableAz2": {
      "Condition": "CreatePrivSubTier1Az2",
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "Private AZ2"
          }
        ]
      }
    },
    "PrivateRouteTableAz3": {
      "Condition": "CreatePrivSubTier1Az3",
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "Private AZ3"
          }
        ]
      }
    },
    "PublicSubnetAz1RouteTableAssociation": {
      "Condition": "CreateVpcResources",
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PubSubAz1"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PublicSubnetAz2RouteTableAssociation": {
      "Condition": "CreatePubSubAz2",
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PubSubAz2"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PublicSubnetAz3RouteTableAssociation": {
      "Condition": "CreatePubSubAz3",
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PubSubAz3"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PrivateSubnetTier1Az1RouteTableAssociation": {
      "Condition": "CreatePrivSubTier1Az1",
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivSubTier1Az1"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTableAz1"
        }
      }
    },
    "PrivateSubnetTier1Az2RouteTableAssociation": {
      "Condition": "CreatePrivSubTier1Az2",
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivSubTier1Az2"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTableAz2"
        }
      }
    },
    "PrivateSubnetTier1Az3RouteTableAssociation": {
      "Condition": "CreatePrivSubTier1Az3",
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivSubTier1Az3"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTableAz3"
        }
      }
    },
    "PrivateSubnetTier2Az1RouteTableAssociation": {
      "Condition": "CreatePrivSubTier1Az1",
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivSubTier2Az1"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTableAz1"
        }
      }
    },
    "PrivateSubnetTier2Az2RouteTableAssociation": {
      "Condition": "CreatePrivSubTier2Az2",
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivSubTier2Az2"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTableAz2"
        }
      }
    },
    "PrivateSubnetTier2Az3RouteTableAssociation": {
      "Condition": "CreatePrivSubTier2Az3",
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivSubTier2Az3"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTableAz3"
        }
      }
    },
    "InternetGateway": {
      "Condition": "AddInternetGateway",
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "GatewayToInternet": {
      "Condition": "AddInternetGateway",
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicRouteTable": {
      "Condition": "CreateVpcResources",
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "Public"
          }
        ]
      }
    },
    "PublicRoute": {
      "Condition": "AddInternetGateway",
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "DefaultRouteAz1": {
      "Condition": "CreatePrivSubTier1Az1",
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTableAz1"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "Nat1"
        }
      }
    },
    "DefaultRouteAz2": {
      "Condition": "CreatePrivSubTier1Az2",
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTableAz2"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "Nat2"
        }
      }
    },
    "DefaultRouteAz3": {
      "Condition": "CreatePrivSubTier1Az3",
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTableAz3"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "Nat3"
        }
      }
    },
    "NatRole": {
      "Condition" : "CreatePrivSubTier1Az1",
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
        ]
      }
    },
    "NatProfile": {
      "Condition" : "CreatePrivSubTier1Az1",
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "NatRole"
          }
        ]
      }
    },
    "Nat1": {
      "Condition" : "CreatePrivSubTier1Az1",
      "Type": "AWS::EC2::Instance",
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "InstallAndConfigure": [
              "Install",
              "Configure"
            ]
          },
          "Install": {
            "packages": {
              "yum": {
                "awslogs": []
              }
            },
            "files": {
              "/root/natconfig.sh": {
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "#!/bin/sh",
                      "echo 1 > /proc/sys/net/ipv4/ip_forward",
                      "echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects",
                      "/sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE",
                      "/sbin/iptables-save > /etc/sysconfig/iptables",
                      "mkdir -p /etc/sysctl.d/",
                      "cat <<EOF > /etc/sysctl.d/nat.conf",
                      "net.ipv4.ip_forward = 1",
                      "net.ipv4.conf.eth0.send_redirects = 0",
                      "EOF"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/awslogs/awslogs.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[general]\n",
                      "state_file= /var/awslogs/state/agent-state\n",
                      "[/var/log/cloud-init.log]\n",
                      "file = /var/log/cloud-init.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudWatchLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cloud-init.log\n",
                      "datetime_format = \n",
                      "[/var/log/cloud-init-output.log]\n",
                      "file = /var/log/cloud-init-output.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudWatchLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cloud-init-output.log\n",
                      "datetime_format = \n",
                      "[/var/log/cfn-init.log]\n",
                      "file = /var/log/cfn-init.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudWatchLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cfn-init.log\n",
                      "datetime_format = \n",
                      "[/var/log/cfn-hup.log]\n",
                      "file = /var/log/cfn-hup.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudWatchLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cfn-hup.log\n",
                      "datetime_format = \n",
                      "[/var/log/cfn-wire.log]\n",
                      "file = /var/log/cfn-wire.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudWatchLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cfn-wire.log\n",
                      "datetime_format = \n"
                    ]
                  ]
                },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              },
              "/etc/awslogs/awscli.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[plugins]\n",
                      "cwlogs = cwlogs\n",
                      "[default]\n",
                      "region = ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.Nat1.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v ",
                      "         --stack ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "         --resource Nat1 ",
                      "         --configsets InstallAndConfigure ",
                      "         --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "sysvinit": {
                "awslogs": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/awslogs/awslogs.conf"
                  ]
                },
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "Configure": {
            "commands": {
              "01-create_state_directory": {
                "command": "mkdir -p /var/awslogs/state"
              },
              "02-configure_nat": {
                "command": "sh /root/natconfig.sh"
              },
              "03-reboot": {
                "command": "reboot"
              }
            },
            "services": {
              "sysvinit": {
                "iptables": {
                  "enabled": "true",
                  "ensureRunning": "true"
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "NatInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": {
          "Ref": "NatProfile"
        },
        "SubnetId": {
          "Ref": "PubSubAz1"
        },
        "InstanceType": {
          "Ref": "NatInstanceType"
        },
        "SourceDestCheck": false,
        "SecurityGroupIds": [
          {
            "Ref": "NatSecurityGroup"
          }
        ],
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "NAT AZ1"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/sh\n",
                "yum -y update\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource Nat1 ",
                "         --configsets InstallAndConfigure ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource Nat1 ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    },
    "Nat2": {
      "Condition" : "CreatePrivSubTier1Az2",
      "Type": "AWS::EC2::Instance",
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "InstallAndConfigure": [
              "Install",
              "Configure"
            ]
          },
          "Install": {
            "packages": {
              "yum": {
                "awslogs": []
              }
            },
            "files": {
              "/root/natconfig.sh": {
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "#!/bin/sh",
                      "echo 1 > /proc/sys/net/ipv4/ip_forward",
                      "echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects",
                      "/sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE",
                      "/sbin/iptables-save > /etc/sysconfig/iptables",
                      "mkdir -p /etc/sysctl.d/",
                      "cat <<EOF > /etc/sysctl.d/nat.conf",
                      "net.ipv4.ip_forward = 1",
                      "net.ipv4.conf.eth0.send_redirects = 0",
                      "EOF"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/awslogs/awslogs.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[general]\n",
                      "state_file= /var/awslogs/state/agent-state\n",
                      "[/var/log/cloud-init.log]\n",
                      "file = /var/log/cloud-init.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudWatchLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cloud-init.log\n",
                      "datetime_format = \n",
                      "[/var/log/cloud-init-output.log]\n",
                      "file = /var/log/cloud-init-output.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudWatchLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cloud-init-output.log\n",
                      "datetime_format = \n",
                      "[/var/log/cfn-init.log]\n",
                      "file = /var/log/cfn-init.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudWatchLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cfn-init.log\n",
                      "datetime_format = \n",
                      "[/var/log/cfn-hup.log]\n",
                      "file = /var/log/cfn-hup.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudWatchLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cfn-hup.log\n",
                      "datetime_format = \n",
                      "[/var/log/cfn-wire.log]\n",
                      "file = /var/log/cfn-wire.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudWatchLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cfn-wire.log\n",
                      "datetime_format = \n"
                    ]
                  ]
                },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              },
              "/etc/awslogs/awscli.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[plugins]\n",
                      "cwlogs = cwlogs\n",
                      "[default]\n",
                      "region = ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.Nat2.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v ",
                      "         --stack ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "         --resource Nat2 ",
                      "         --configsets InstallAndConfigure ",
                      "         --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "sysvinit": {
                "awslogs": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/awslogs/awslogs.conf"
                  ]
                },
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "Configure": {
            "commands": {
              "01-create_state_directory": {
                "command": "mkdir -p /var/awslogs/state"
              },
              "02-configure_nat": {
                "command": "sh /root/natconfig.sh"
              },
              "03-reboot": {
                "command": "reboot"
              }
            },
            "services": {
              "sysvinit": {
                "iptables": {
                  "enabled": "true",
                  "ensureRunning": "true"
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "NatInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": {
          "Ref": "NatProfile"
        },
        "SubnetId": {
          "Ref": "PubSubAz2"
        },
        "InstanceType": {
          "Ref": "NatInstanceType"
        },
        "SourceDestCheck": false,
        "SecurityGroupIds": [
          {
            "Ref": "NatSecurityGroup"
          }
        ],
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "NAT AZ2"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/sh\n",
                "yum -y update\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource Nat2 ",
                "         --configsets InstallAndConfigure ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource Nat2 ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    },
    "Nat3": {
      "Condition" : "CreatePrivSubTier1Az3",
      "Type": "AWS::EC2::Instance",
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "InstallAndConfigure": [
              "Install",
              "Configure"
            ]
          },
          "Install": {
            "packages": {
              "yum": {
                "awslogs": []
              }
            },
            "files": {
              "/root/natconfig.sh": {
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "#!/bin/sh",
                      "echo 1 > /proc/sys/net/ipv4/ip_forward",
                      "echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects",
                      "/sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE",
                      "/sbin/iptables-save > /etc/sysconfig/iptables",
                      "mkdir -p /etc/sysctl.d/",
                      "cat <<EOF > /etc/sysctl.d/nat.conf",
                      "net.ipv4.ip_forward = 1",
                      "net.ipv4.conf.eth0.send_redirects = 0",
                      "EOF"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/awslogs/awslogs.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[general]\n",
                      "state_file= /var/awslogs/state/agent-state\n",
                      "[/var/log/cloud-init.log]\n",
                      "file = /var/log/cloud-init.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudWatchLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cloud-init.log\n",
                      "datetime_format = \n",
                      "[/var/log/cloud-init-output.log]\n",
                      "file = /var/log/cloud-init-output.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudWatchLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cloud-init-output.log\n",
                      "datetime_format = \n",
                      "[/var/log/cfn-init.log]\n",
                      "file = /var/log/cfn-init.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudWatchLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cfn-init.log\n",
                      "datetime_format = \n",
                      "[/var/log/cfn-hup.log]\n",
                      "file = /var/log/cfn-hup.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudWatchLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cfn-hup.log\n",
                      "datetime_format = \n",
                      "[/var/log/cfn-wire.log]\n",
                      "file = /var/log/cfn-wire.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudWatchLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cfn-wire.log\n",
                      "datetime_format = \n"
                    ]
                  ]
                },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              },
              "/etc/awslogs/awscli.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[plugins]\n",
                      "cwlogs = cwlogs\n",
                      "[default]\n",
                      "region = ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.Nat3.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v ",
                      "         --stack ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "         --resource Nat3 ",
                      "         --configsets InstallAndConfigure ",
                      "         --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "sysvinit": {
                "awslogs": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/awslogs/awslogs.conf"
                  ]
                },
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "Configure": {
            "commands": {
              "01-create_state_directory": {
                "command": "mkdir -p /var/awslogs/state"
              },
              "02-configure_nat": {
                "command": "sh /root/natconfig.sh"
              },
              "03-reboot": {
                "command": "reboot"
              }
            },
            "services": {
              "sysvinit": {
                "iptables": {
                  "enabled": "true",
                  "ensureRunning": "true"
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "NatInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": {
          "Ref": "NatProfile"
        },
        "SubnetId": {
          "Ref": "PubSubAz3"
        },
        "InstanceType": {
          "Ref": "NatInstanceType"
        },
        "SourceDestCheck": false,
        "SecurityGroupIds": [
          {
            "Ref": "NatSecurityGroup"
          }
        ],
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "NAT AZ3"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/sh\n",
                "yum -y update\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource Nat3 ",
                "         --configsets InstallAndConfigure ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource Nat3 ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    },
    "CloudWatchLogs": {
      "Condition" : "CreatePrivSubTier1Az1",
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 7
      }
    },
    "NatSecurityGroup": {
      "Condition": "CreatePrivSubTier1Az1",
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable NAT functionality",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": {
              "Ref": "VpcCidr"
            }
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": {
              "Ref": "VpcCidr"
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "VpcId": {
      "Condition": "CreateVpcResources",
      "Description": "ID of the VPC",
      "Value": {
        "Ref": "Vpc"
      }
    },
    "PubSubAz1Id": {
      "Condition": "CreateVpcResources",
      "Description": "ID of the Public Subnet in AZ1",
      "Value": {
        "Ref": "PubSubAz1"
      }
    },
    "PubSubAz2Id": {
      "Condition": "CreatePubSubAz2",
      "Description": "ID of the Public Subnet in AZ2",
      "Value": {
        "Ref": "PubSubAz2"
      }
    },
    "PubSubAz3Id": {
      "Condition": "CreatePubSubAz3",
      "Description": "ID of the Public Subnet in AZ3",
      "Value": {
        "Ref": "PubSubAz3"
      }
    },
    "PrivSubTier1Az1Id": {
      "Condition": "CreatePrivSubTier1Az1",
      "Description": "ID of the Private Tier1 Subnet in AZ1",
      "Value": {
        "Ref": "PrivSubTier1Az1"
      }
    },
    "PrivSubTier1Az2Id": {
      "Condition": "CreatePrivSubTier1Az2",
      "Description": "ID of the Private Tier1 Subnet in AZ2",
      "Value": {
        "Ref": "PrivSubTier1Az2"
      }
    },
    "PrivSubTier1Az3Id": {
      "Condition": "CreatePrivSubTier1Az3",
      "Description": "ID of the Private Tier1 Subnet in AZ3",
      "Value": {
        "Ref": "PrivSubTier1Az3"
      }
    },
    "PrivSubTier2Az1Id": {
      "Condition": "CreatePrivSubTier2Az1",
      "Description": "ID of the Private Tier2 Subnet in AZ1",
      "Value": {
        "Ref": "PrivSubTier2Az1"
      }
    },
    "PrivSubTier2Az2Id": {
      "Condition": "CreatePrivSubTier2Az2",
      "Description": "ID of the Private Tier2 Subnet in AZ2",
      "Value": {
        "Ref": "PrivSubTier2Az2"
      }
    },
    "PrivSubTier2Az3Id": {
      "Condition": "CreatePrivSubTier2Az3",
      "Description": "ID of the Private Tier2 Subnet in AZ3",
      "Value": {
        "Ref": "PrivSubTier2Az3"
      }
    },
    "Nat1Ip": {
      "Condition": "CreatePrivSubTier1Az1",
      "Description": "Dynamic Public IP of NAT in AZ1",
      "Value": {
        "Fn::GetAtt": [
          "Nat1",
          "PublicIp"
        ]
      }
    },
    "Nat2Ip": {
      "Condition": "CreatePrivSubTier1Az2",
      "Description": "Dynamic Public IP of NAT in AZ2",
      "Value": {
        "Fn::GetAtt": [
          "Nat2",
          "PublicIp"
        ]
      }
    },
    "Nat3Ip": {
      "Condition": "CreatePrivSubTier1Az3",
      "Description": "Dynamic Public IP of NAT in AZ3",
      "Value": {
        "Fn::GetAtt": [
          "Nat3",
          "PublicIp"
        ]
      }
    }
  }
}